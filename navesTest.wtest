import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

	test "propulsar" {
		naveVacia.propulsar()

		assert.equals(20000, naveVacia.velocidad())

		naveVacia.velocidad(290000)
		naveVacia.propulsar()
		assert.equals(300000, naveVacia.velocidad())
	}

	test "encontrar enemigo" {
		naveLlena.encontrarEnemigo()

		assert.equals(0, naveLlena.carga())
		assert.equals(300000, naveLlena.velocidad())
	}
}

describe "Nave de Carga Radioactiva" {
	const naveVacia = new NaveDeCargaRadioactiva()
	const naveLlena = new NaveDeCargaRadioactiva(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

	test "propulsar" {
		naveVacia.propulsar()

		assert.equals(20000, naveVacia.velocidad())
		naveVacia.velocidad(290000)
		naveVacia.propulsar()
		assert.equals(300000, naveVacia.velocidad())
	}

	test "sellar al vacio" {
		naveLlena.carga(5000)
		naveLlena.velocidad(10000)

		naveLlena.recibirAmenaza()
		assert.equals(0, naveLlena.velocidad())
		
	}

	test "preparar viaje" {
		naveVacia.prepararViaje()

		assert.equals(15000, naveVacia.velocidad())
		assert.that(naveVacia.estaSellado())
	}
	
	test "encontrar enemigo" {
		naveLlena.encontrarEnemigo()

		assert.equals(0, naveLlena.carga())
		assert.equals(300000, naveLlena.velocidad())
	}
}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

	test "propulsar" {
		naveSinPasajeros.propulsar()

		assert.equals(20000, naveSinPasajeros.velocidad())

		naveSinPasajeros.velocidad(290000)
		naveSinPasajeros.propulsar()
		assert.equals(300000, naveSinPasajeros.velocidad())
	}

	test "preparar Viaje" {
		naveConPasajeros.prepararViaje()

		assert.equals(300000, naveConPasajeros.velocidad())
	}
}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("Â¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}

	test "propulsar" {
		naveEnReposo.propulsar()

		assert.equals(20000, naveEnReposo.velocidad())

		naveEnReposo.velocidad(290000)
		naveEnReposo.propulsar()
		assert.equals(300000, naveEnReposo.velocidad())
	}

	test "preparar viaje en modo reposo" {
		naveEnReposo.prepararViaje() 
		assert.equals("Saliendo en Mision", naveEnReposo.ultimoMensaje())
		assert.equals(ataque, naveEnReposo.modo())
		assert.equals(15000, naveEnReposo.velocidad())
	}

	test "preparar viaje en modo ataque" {
		naveEnAtaque.prepararViaje() 
		assert.equals("Volviendo a la base", naveEnAtaque.ultimoMensaje())
		assert.equals(15000, naveEnAtaque.velocidad())
	}
}
